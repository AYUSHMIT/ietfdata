from logging import LoggerAdapter
from six import binary_type, moves
from typing import Any, Optional

xrange = moves.xrange
long = int
DELETED: bytes
SEEN: bytes
ANSWERED: bytes
FLAGGED: bytes
DRAFT: bytes
RECENT: bytes

class Namespace(tuple):
    def __new__(cls, personal: Any, other: Any, shared: Any): ...
    personal: Any = ...
    other: Any = ...
    shared: Any = ...

class SocketTimeout: ...
class MailboxQuotaRoots: ...
class Quota: ...

class IMAPClient:
    Error: Any = ...
    AbortError: Any = ...
    ReadOnlyError: Any = ...
    host: Any = ...
    port: Any = ...
    ssl: Any = ...
    ssl_context: Any = ...
    stream: Any = ...
    use_uid: Any = ...
    folder_encode: bool = ...
    normalise_times: bool = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., use_uid: bool = ..., ssl: bool = ..., stream: bool = ..., ssl_context: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def starttls(self, ssl_context: Optional[Any] = ...): ...
    def login(self, username: Any, password: Any): ...
    def oauth2_login(self, user: Any, access_token: Any, mech: str = ..., vendor: Optional[Any] = ...): ...
    def plain_login(self, identity: Any, password: Any, authorization_identity: Optional[Any] = ...): ...
    def logout(self): ...
    def shutdown(self) -> None: ...
    def enable(self, *capabilities: Any): ...
    def id_(self, parameters: Optional[Any] = ...): ...
    def capabilities(self): ...
    def has_capability(self, capability: Any): ...
    def namespace(self): ...
    def list_folders(self, directory: str = ..., pattern: str = ...): ...
    def xlist_folders(self, directory: str = ..., pattern: str = ...): ...
    def list_sub_folders(self, directory: str = ..., pattern: str = ...): ...
    def find_special_folder(self, folder_flag: Any): ...
    def select_folder(self, folder: Any, readonly: bool = ...): ...
    def unselect_folder(self): ...
    def noop(self): ...
    def idle(self) -> None: ...
    def idle_check(self, timeout: Optional[Any] = ...): ...
    def idle_done(self): ...
    def folder_status(self, folder: Any, what: Optional[Any] = ...): ...
    def close_folder(self): ...
    def create_folder(self, folder: Any): ...
    def rename_folder(self, old_name: Any, new_name: Any): ...
    def delete_folder(self, folder: Any): ...
    def folder_exists(self, folder: Any): ...
    def subscribe_folder(self, folder: Any): ...
    def unsubscribe_folder(self, folder: Any): ...
    def search(self, criteria: str = ..., charset: Optional[Any] = ...): ...
    def gmail_search(self, query: Any, charset: str = ...): ...
    def sort(self, sort_criteria: Any, criteria: str = ..., charset: str = ...): ...
    def thread(self, algorithm: str = ..., criteria: str = ..., charset: str = ...): ...
    def get_flags(self, messages: Any): ...
    def add_flags(self, messages: Any, flags: Any, silent: bool = ...): ...
    def remove_flags(self, messages: Any, flags: Any, silent: bool = ...): ...
    def set_flags(self, messages: Any, flags: Any, silent: bool = ...): ...
    def get_gmail_labels(self, messages: Any): ...
    def add_gmail_labels(self, messages: Any, labels: Any, silent: bool = ...): ...
    def remove_gmail_labels(self, messages: Any, labels: Any, silent: bool = ...): ...
    def set_gmail_labels(self, messages: Any, labels: Any, silent: bool = ...): ...
    def delete_messages(self, messages: Any, silent: bool = ...): ...
    def fetch(self, messages: Any, data: Any, modifiers: Optional[Any] = ...): ...
    def append(self, folder: Any, msg: Any, flags: Any = ..., msg_time: Optional[Any] = ...): ...
    def copy(self, messages: Any, folder: Any): ...
    def move(self, messages: Any, folder: Any): ...
    def expunge(self, messages: Optional[Any] = ...): ...
    def getacl(self, folder: Any): ...
    def setacl(self, folder: Any, who: Any, what: Any): ...
    def get_quota(self, mailbox: str = ...): ...
    def get_quota_root(self, mailbox: Any): ...
    def set_quota(self, quotas: Any): ...
    @property
    def welcome(self): ...

class _quoted(binary_type):
    @classmethod
    def maybe(cls, original: Any): ...

class _dict_bytes_normaliser:
    def __init__(self, d: Any) -> None: ...
    def iteritems(self) -> None: ...
    items: Any = ...
    def __contains__(self, ink: Any): ...
    def get(self, ink: Any, default: Any = ...): ...
    def pop(self, ink: Any, default: Any = ...): ...

class IMAPlibLoggerAdapter(LoggerAdapter):
    def process(self, msg: Any, kwargs: Any): ...
